unwt.tab <- wtd.table(UNWT.VAR, weights= NULL, type='table')
unwtd.freq <- data.frame(cbind(
unwt.tab, round(unwt.tab/sum(unwt.tab)*100,2),
cumsum(unwt.tab), cumsum(round(unwt.tab/sum(unwt.tab)*100,2))))
names(unwtd.freq) <- c("Frequency", "Percent", "Cumulative Frequency", "Cumulative Percent")
unwtd.title <- paste('2023 NIS', 'UNWEIGHTED FREQUENCIES', label(UNWT.VAR), sep="\n")
label(unwtd.freq) <- unwtd.title
print(unwtd.freq)
}
UNWT.VAR <- NISPUF23$AGEGRP	#INPUT A VARIABLE OF INTEREST
unwt_freq(UNWT.VAR)
#---WEIGHTED FREQUENCY---#
WT <- NISPUF23$RDDWT_C		#INPUT A WEIGHT VARIABLE
WT.VAR <- NISPUF23$AGEGRP 	#INPUT A VARIABLE OF INTEREST
wt.tab <- wtd.table(WT.VAR, weights= WT, type='table')
wtd.freq <- data.frame(cbind(
wt.tab, round(wt.tab/sum(wt.tab)*100,2),
cumsum(wt.tab), cumsum(round(wt.tab/sum(wt.tab)*100,2))))
names(wtd.freq) <- c("Frequency", "Percent", "Cumulative Frequency", "Cumulative Percent")
wtd.title <- paste('2023 NIS PUBLIC USE FILE', 'WEIGHTED FREQUENCIES (EXCLUDING TERRITORIES)', label(WT.VAR), sep="\n")
label(wtd.freq) <- wtd.title
print(wtd.freq)
#--- NAME OF R DATASET ---#
in.file <- paste(dd,"/NISPUF23.RData",sep="")
library(survey) #TO USE svydesign(), svymean(), and svyby()
library(Hmisc) #TO USE prn()
install.packages("prettyR")
library(prettyR) #TO USE freq()
library(ggplot2) #TO USE ggplot()
#--- SET DATASET AND OUTPUT LOCATIONS ---#
dd <- "C:/Users/aidan/Downloads" #"path-to-dataset"
out <-"C:/Users/aidan/Downloads" #"path where output will go"
#--- NAME OF R DATASET ---#
in.file <- paste(dd,"/NISPUF23.RData",sep="")
#---READ R DATASET---#
load(in.file)
UTD431H314levels=c(0,1)
UTD431H314labels=c("NOT 4:3:1:3:3:1:4 UTD", "4:3:1:3:3:1:4 UTD")
HAD_CPOXlevels=c(1,2,77,99)
HAD_CPOXlabels=c("YES", "NO", "DON'T KNOW", "REFUSED")
RACE_PUFlevels=c(1,2,3)
RACE_PUFlabels=c("WHITE ONLY", "BLACK ONLY", "OTHER + MULTIPLE RACE")
INCPOVlevels=c(1,2,3,4)
INCPOVlabels=c("ABOVE POVERTY, > $75K", "ABOVE POVERTY, <= $75K", "BELOW POVERTY", "UNKNOWN")
ESTIAPlevels=c(0, 1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 25, 27, 28, 29, 30, 31, 34, 35, 36, 38, 40, 41, 44, 46, 47, 49, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 72, 73, 74, 75, 76, 77, 106)
ESTIAPlabels=c("US Total", "CT", "MA", "ME", "NH", "RI", "VT", "NJ", "NY-Rest of State", "NY-City of New York", "DC", "DE", "MD", "PA-Rest of State", "PA-Philadelphia County", "VA", "WV", "AL", "FL", "GA", "KY", "MS", "NC", "SC", "TN", "IL-Rest of State", "IL-City of Chicago", "IN", "MI", "MN", "OH", "WI", "AR", "LA", "NM", "OK", "TX-Rest of State", "TX-City of Houston", "TX-Bexar County", "IA", "KS", "MO", "NE", "CO", "MT", "ND", "SD", "UT", "WY", "AZ", "CA", "HI", "NV", "AK", "ID", "OR", "WA", "Puerto Rico")
#NOTE : THE STATE VARIABLE IS BASED ON STATE FIPS CODES. THERE ARE
#NO STATES WITH FIPS CODES 3,7,14,43,52,57-71,73-78.
STATElevels=c(1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 16, 17,
18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53,
54, 55, 56,72)
STATElabels=c(
"ALABAMA",
"ALASKA",
"ARIZONA",
"ARKANSAS",
"CALIFORNIA",
"COLORADO",
"CONNECTICUT",
"DELAWARE",
"DISTRICT OF COLUMBIA",
"FLORIDA",
"GEORGIA",
"HAWAII",
"IDAHO",
"ILLINOIS",
"INDIANA",
"IOWA",
"KANSAS",
"KENTUCKY",
"LOUISIANA",
"MAINE",
"MARYLAND",
"MASSACHUSETTS",
"MICHIGAN",
"MINNESOTA",
"MISSISSIPPI",
"MISSOURI",
"MONTANA",
"NEBRASKA",
"NEVADA",
"NEW HAMPSHIRE",
"NEW JERSEY",
"NEW MEXICO",
"NEW YORK",
"NORTH CAROLINA",
"NORTH DAKOTA",
"OHIO",
"OKLAHOMA",
"OREGON",
"PENNSYLVANIA",
"RHODE ISLAND",
"SOUTH CAROLINA",
"SOUTH DAKOTA",
"TENNESSEE",
"TEXAS",
"UTAH",
"VERMONT",
"VIRGINIA",
"WASHINGTON",
"WEST VIRGINIA",
"WISCONSIN",
"WYOMING",
"PUERTO RICO"
)
#---RDDWT_C WILL BE USED AS THE HOUSEHOLD-LEVEL WEIGHT (RDDWT_C IS THE SINGLE-FRAME CELLULAR PHONE WEIGHT EXCLUDING TERRITORIES; USE RDDWT_C_TERR TO INCLUDE TERRITORIES) ---#
#---PROVWT_C WILL BE USED AS THE PROVIDER-LEVEL WEIGHT (PROVWT_C IS THE SINGLE-FRAME CELLULAR PHONE WEIGHT EXCLUDING TERRITORIES; USE PROVWT_C_TERR TO INCLUDE TERRITORIES) ---#
#---STRATUM WILL BE USED AS A STRATUM VARIABLE FOR VARIANCE ESTIMATION (USE STRATUM FOR ALL ESTIMATION) ---#
R_FILE <- subset(NISPUF23, select=c(SEQNUMHH, SEQNUMC, P_UTD431H314_ROUT_S, HAD_CPOX, ESTIAP23, STATE, RDDWT_C, PROVWT_C, RACE_K, INCPOV1, STRATUM, PDAT))
names(R_FILE) <- c("SEQNUMHH", "SEQNUMC", "P_UTD431H314_ROUT_S", "HAD_CPOX", "ESTIAP", "STATE", "RDDWT", "PROVWT", "RACE_K", "INCPOV1", "STRATUM", "PDAT")
R_FILE$P_UTD431H314_ROUT_S <- factor(R_FILE$P_UTD431H314_ROUT_S, levels=UTD431H314levels,labels=UTD431H314labels)
R_FILE$HAD_CPOX <- factor(R_FILE$HAD_CPOX, levels=HAD_CPOXlevels, labels=HAD_CPOXlabels)
R_FILE$RACE_K <- factor(R_FILE$RACE_K, levels=RACE_PUFlevels, labels=RACE_PUFlabels, exclude=NULL)
R_FILE$INCPOV1 <- factor(R_FILE$INCPOV1, levels=INCPOVlevels,labels=INCPOVlabels, exclude=NULL)
R_FILE$ESTIAP <- factor(R_FILE$ESTIAP, levels=ESTIAPlevels, labels=ESTIAPlabels)
R_FILE$STATE <- factor(R_FILE$STATE, levels=STATElevels, labels=STATElabels)
#---SPECIFY A SAMPLING DESIGN---#
svydsg <- svydesign(id=~SEQNUMHH, strata=~STRATUM, weights=~PROVWT, data=R_FILE[!is.na(R_FILE$PROVWT),])
#---U.S. TOTAL ESTIMATES AND STANDARD ERRORS---#
r_nation <- svymean(~P_UTD431H314_ROUT_S, svydsg)
PERCENT_UTD <- round(r_nation*100,2) #CONVERT INTO PERCENT ESTIMATES(MEAN)
SE_UTD <- round(SE(r_nation)*100,2) #CONVERT INTO PERCENT ESTIMATES(SE)
r_nation_est <- cbind(PERCENT_UTD, SE_UTD)
title <- "PERCENT 4:3:1:3:3:1:4 ESTIMATES AT A NATIONWIDE LEVEL\n"
prn(r_nation_est, title)
#---ESTIMATION AREA ESTIMATES AND STANDARD ERRORS---#
r_est <- svyby(~P_UTD431H314_ROUT_S, ~ESTIAP, svydsg, svymean)
r_est[,-c(1)] <- round(r_est[,-c(1)]*100,2) #CONVERT INTO PERCENT ESTIMATES
r_est <- subset(r_est, select=c(1,3,5))
names(r_est) <- c("ESTIMATION AREA", "PERCENT 4:3:1:3:3:1:4 UTD", "STANDARD ERROR UTD")
title <- "PERCENT 4:3:1:3:3:1:4 ESTIMATES BY ESTIMATION AREA\n"
prn(r_est, title)
View(NISPUF23.CONTENTS)
View(NISPUF23)
View(R_FILE)
View(NISPUF23)
View(wtd.freq)
# CREATE GRAPH_4
graph_4 <- ggplot(data = r_est4, aes(x = INCOME, y = PERCENT_UTD, fill = RACE)) +
geom_bar(position = "dodge", stat = "identity") +
labs(title = "Percentage of Children Up-to-Date with Vaccine Series 4:3:1:3:3:1:4 by Race and Poverty Status,\nNational Immunization Survey - Child, 2023",
caption = "(Graph 4 using 'R')") +
xlab("Poverty Status") +
ylab("4:3:1:3:3:1:4 Up-To-Date (%)") +
theme(legend.position = "bottom")
plot(graph_4)
# SAVE GRAPH AS PNG
png(filename=paste0(out, "/graph_4_R.png"), width = 800, height = 600)
plot(graph_4)
dev.off()
# CREATE GRAPH_4
graph_4 <- ggplot(data = r_est4, aes(x = INCOME, y = PERCENT_UTD, fill = RACE)) +
geom_bar(position = "dodge", stat = "identity") +
labs(title = "Percentage of Children Up-to-Date with Vaccine Series 4:3:1:3:3:1:4 by Race and Poverty Status,\nNational Immunization Survey - Child, 2023",
caption = "(Graph 4 using 'R')") +
xlab("Poverty Status") +
ylab("4:3:1:3:3:1:4 Up-To-Date (%)") +
theme(legend.position = "bottom")
#---SPECIFY A SAMPLING DESIGN---#
svydsg <- svydesign(id=~SEQNUMHH, strata=~STRATUM, weights=~PROVWT, data=R_FILE[!is.na(R_FILE$PROVWT),])
#---PERCENT 4:3:1:3:3:1:4 UP-TO-DATE UP-TO-DATE AND ESTIMATED STANDARD ERRORS---#
r_est4 <- svyby(~P_UTD431H314_ROUT_S, ~RACE_K+INCPOV1, svydsg, svymean)
r_est4[,-c(1,2)] <- round(r_est4[,-c(1,2)]*100,2) #CONVERT INTO PERCENT ESTIMATES
r_est4 <- subset(r_est4, select=c(1,2,4,6)) #SELECT ESTIMATES FOR UP-TO-DATE CASES
names(r_est4) <- c("RACE", "INCOME", "PERCENT_UTD", "STANDARD_ERROR_UTD")
title <- "Table 4B. Q1/2023 - Q4/2023, Percent 4:3:1:3:3:1:4 UTD and Estimated Standard Errors\n"
prn(r_est4, title)
# CREATE GRAPH_4
graph_4 <- ggplot(data = r_est4, aes(x = INCOME, y = PERCENT_UTD, fill = RACE)) +
geom_bar(position = "dodge", stat = "identity") +
labs(title = "Percentage of Children Up-to-Date with Vaccine Series 4:3:1:3:3:1:4 by Race and Poverty Status,\nNational Immunization Survey - Child, 2023",
caption = "(Graph 4 using 'R')") +
xlab("Poverty Status") +
ylab("4:3:1:3:3:1:4 Up-To-Date (%)") +
theme(legend.position = "bottom")
# CREATE GRAPH_4
graph_4 <- ggplot(data = r_est4, aes(x = INCOME, y = PERCENT_UTD, fill = RACE)) +
geom_bar(position = "dodge", stat = "identity") +
labs(title = "Percentage of Children Up-to-Date with Vaccine Series 4:3:1:3:3:1:4 by Race and Poverty Status,\nNational Immunization Survey - Child, 2023",
caption = "(Graph 4 using 'R')") +
xlab("Poverty Status") +
ylab("4:3:1:3:3:1:4 Up-To-Date (%)") +
theme(legend.position = "bottom")
plot(graph_4)
# SAVE GRAPH AS PNG
png(filename=paste0(out, "/graph_4_R.png"), width = 800, height = 600)
#---UNWEIGHTED FREQUENCIES---#
unwt_freq <- function(UNWT.VAR){#FUNCTION TO PRINT UNWEIGHTED FREQUENCIES
unwt.tab <- wtd.table(UNWT.VAR, weights= NULL, type='table')
unwtd.freq <- data.frame(cbind(
unwt.tab, round(unwt.tab/sum(unwt.tab)*100,2),
cumsum(unwt.tab), cumsum(round(unwt.tab/sum(unwt.tab)*100,2))))
names(unwtd.freq) <- c("Frequency", "Percent", "Cumulative Frequency", "Cumulative Percent")
unwtd.title <- paste('Table 4A. Q1/2023 - Q4/2023', 'UNWEIGHTED FREQUENCIES', label(UNWT.VAR), sep="\n")
label(unwtd.freq) <- unwtd.title
print(unwtd.freq)
}
unwt_freq(R_FILE$P_UTD431H314_ROUT_S[!is.na(R_FILE$PROVWT)])
unwt_freq(R_FILE$INCPOV1[!is.na(R_FILE$PROVWT)])
unwt_freq(R_FILE$RACE_K[!is.na(R_FILE$PROVWT)])
View(r_est4)
View(r_est)
prn(r_est, title)
?syvmean
?svydesign
View(r_nation_est)
View(r_nation_est)
View(r_nation_est)
View(r_est4)
prn(r_est4, title)
# CREATE GRAPH_4
graph_4 <- ggplot(data = r_est4, aes(x = INCOME, y = PERCENT_UTD, fill = RACE)) +
geom_bar(position = "dodge", stat = "identity") +
labs(title = "Percentage of Children Up-to-Date with Vaccine Series 4:3:1:3:3:1:4 by Race and Poverty Status,\nNational Immunization Survey - Child, 2023",
caption = "(Graph 4 using 'R')") +
xlab("Poverty Status") +
ylab("4:3:1:3:3:1:4 Up-To-Date (%)") +
theme(legend.position = "bottom")
plot(graph_4)
View(svydsg)
print(svydsg)
#---SPECIFY A SAMPLING DESIGN---#
svydsg <- svydesign(id=~SEQNUMHH, strata=~STRATUM, weights=~PROVWT, data=R_FILE[!is.na(R_FILE$PROVWT),])
#---STATE ESTIMATES AND STANDARD ERRORS---#
r_est2 <- svyby(~P_UTD431H314_ROUT_S, ~STATE, svydsg, svymean)
r_est2[,-c(1)] <- round(r_est2[,-c(1)]*100,2) #CONVERT INTO PERCENT ESTIMATES
r_est2 <- subset(r_est2, select=c(1,3,5)) #SELECT ESTIMATES FOR UP-TO-DATE CASES
names(r_est2) <- c("STATE", "PERCENT 4:3:1:3:3:1:4 UTD", "STANDARD ERROR UTD")
prn(r_est2, '4:3:1:3:3:1:4 ESTIMATES BY STATE\n')
View(r_est2)
?svyby
View(svydsg)
test1 <-svby(~P_UTD431H314_ROUT_S, ~RACE_K, svydsg, svymean)
test1 <-svyby(~P_UTD431H314_ROUT_S, ~RACE_K, svydsg, svymean)
test1[,-c(1)] <- round(test_1[,-c(1)]*100,2)
test1[,-c(1)] <- round(test1[,-c(1)]*100,2)
prn(test1, '4:3:1:3:3:1:4 ESTIMATES BY RACE\n')
prn(r_est2, '4:3:1:3:3:1:4 ESTIMATES BY STATE\n')
names(test1) <- c("Race", "PERCENT 4:3:1:3:3:1:4 UTD", "STANDARD ERROR UTD")
prn(test1, '4:3:1:3:3:1:4 ESTIMATES BY RACE\n')
View(test1)
library(survey) #TO USE svydesign(), svymean(), and svyby()
library(Hmisc) #TO USE prn()
#install.packages("prettyR")
library(prettyR) #TO USE freq()
library(ggplot2) #TO USE ggplot()
#--- SET DATASET AND OUTPUT LOCATIONS ---#
dd <- "C:/Users/aidan/Downloads" #"path-to-dataset"
out <-"C:/Users/aidan/Downloads" #"path where output will go"
#--- NAME OF R DATASET ---#
in.file <- paste(dd,"/NISPUF23.RData",sep="")
#---READ R DATASET---#
load(in.file)
#---DEFINE FORMATS---#
UTD431H314levels=c(0,1)
UTD431H314labels=c("NOT 4:3:1:3:3:1:4 UTD", "4:3:1:3:3:1:4 UTD")
HAD_CPOXlevels=c(1,2,77,99)
HAD_CPOXlabels=c("YES", "NO", "DON'T KNOW", "REFUSED")
RACE_PUFlevels=c(1,2,3)
RACE_PUFlabels=c("WHITE ONLY", "BLACK ONLY", "OTHER + MULTIPLE RACE")
INCPOVlevels=c(1,2,3,4)
INCPOVlabels=c("ABOVE POVERTY, > $75K", "ABOVE POVERTY, <= $75K", "BELOW POVERTY", "UNKNOWN")
ESTIAPlevels=c(0, 1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 25, 27, 28, 29, 30, 31, 34, 35, 36, 38, 40, 41, 44, 46, 47, 49, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 72, 73, 74, 75, 76, 77, 106)
ESTIAPlabels=c("US Total", "CT", "MA", "ME", "NH", "RI", "VT", "NJ", "NY-Rest of State", "NY-City of New York", "DC", "DE", "MD", "PA-Rest of State", "PA-Philadelphia County", "VA", "WV", "AL", "FL", "GA", "KY", "MS", "NC", "SC", "TN", "IL-Rest of State", "IL-City of Chicago", "IN", "MI", "MN", "OH", "WI", "AR", "LA", "NM", "OK", "TX-Rest of State", "TX-City of Houston", "TX-Bexar County", "IA", "KS", "MO", "NE", "CO", "MT", "ND", "SD", "UT", "WY", "AZ", "CA", "HI", "NV", "AK", "ID", "OR", "WA", "Puerto Rico")
#NOTE : THE STATE VARIABLE IS BASED ON STATE FIPS CODES. THERE ARE
#NO STATES WITH FIPS CODES 3,7,14,43,52,57-71,73-78.
STATElevels=c(1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 16, 17,
18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53,
54, 55, 56,72)
STATElabels=c(
"ALABAMA",
"ALASKA",
"ARIZONA",
"ARKANSAS",
"CALIFORNIA",
"COLORADO",
"CONNECTICUT",
"DELAWARE",
"DISTRICT OF COLUMBIA",
"FLORIDA",
"GEORGIA",
"HAWAII",
"IDAHO",
"ILLINOIS",
"INDIANA",
"IOWA",
"KANSAS",
"KENTUCKY",
"LOUISIANA",
"MAINE",
"MARYLAND",
"MASSACHUSETTS",
"MICHIGAN",
"MINNESOTA",
"MISSISSIPPI",
"MISSOURI",
"MONTANA",
"NEBRASKA",
"NEVADA",
"NEW HAMPSHIRE",
"NEW JERSEY",
"NEW MEXICO",
"NEW YORK",
"NORTH CAROLINA",
"NORTH DAKOTA",
"OHIO",
"OKLAHOMA",
"OREGON",
"PENNSYLVANIA",
"RHODE ISLAND",
"SOUTH CAROLINA",
"SOUTH DAKOTA",
"TENNESSEE",
"TEXAS",
"UTAH",
"VERMONT",
"VIRGINIA",
"WASHINGTON",
"WEST VIRGINIA",
"WISCONSIN",
"WYOMING",
"PUERTO RICO"
)
#---RDDWT_C WILL BE USED AS THE HOUSEHOLD-LEVEL WEIGHT (RDDWT_C IS THE SINGLE-FRAME CELLULAR PHONE WEIGHT EXCLUDING TERRITORIES; USE RDDWT_C_TERR TO INCLUDE TERRITORIES) ---#
#---PROVWT_C WILL BE USED AS THE PROVIDER-LEVEL WEIGHT (PROVWT_C IS THE SINGLE-FRAME CELLULAR PHONE WEIGHT EXCLUDING TERRITORIES; USE PROVWT_C_TERR TO INCLUDE TERRITORIES) ---#
#---STRATUM WILL BE USED AS A STRATUM VARIABLE FOR VARIANCE ESTIMATION (USE STRATUM FOR ALL ESTIMATION) ---#
R_FILE <- subset(NISPUF23, select=c(SEQNUMHH, SEQNUMC, P_UTD431H314_ROUT_S, HAD_CPOX, ESTIAP23, STATE, RDDWT_C, PROVWT_C, RACE_K, INCPOV1, STRATUM, PDAT))
names(R_FILE) <- c("SEQNUMHH", "SEQNUMC", "P_UTD431H314_ROUT_S", "HAD_CPOX", "ESTIAP", "STATE", "RDDWT", "PROVWT", "RACE_K", "INCPOV1", "STRATUM", "PDAT")
#---ASSIGN LABELS---#
R_FILE$P_UTD431H314_ROUT_S <- factor(R_FILE$P_UTD431H314_ROUT_S, levels=UTD431H314levels,labels=UTD431H314labels)
R_FILE$HAD_CPOX <- factor(R_FILE$HAD_CPOX, levels=HAD_CPOXlevels, labels=HAD_CPOXlabels)
R_FILE$RACE_K <- factor(R_FILE$RACE_K, levels=RACE_PUFlevels, labels=RACE_PUFlabels, exclude=NULL)
R_FILE$INCPOV1 <- factor(R_FILE$INCPOV1, levels=INCPOVlevels,labels=INCPOVlabels, exclude=NULL)
R_FILE$ESTIAP <- factor(R_FILE$ESTIAP, levels=ESTIAPlevels, labels=ESTIAPlabels)
R_FILE$STATE <- factor(R_FILE$STATE, levels=STATElevels, labels=STATElabels)
#---SPECIFY A SAMPLING DESIGN---#
svydsg <- svydesign(id=~SEQNUMHH, strata=~STRATUM, weights=~PROVWT, data=R_FILE[!is.na(R_FILE$PROVWT),])
#---SPECIFY A SAMPLING DESIGN---#
svydsg <- svydesign(id=~SEQNUMHH, strata=~STRATUM, weights=~PROVWT, data=R_FILE[!is.na(R_FILE$PROVWT),])
#---STATE ESTIMATES AND STANDARD ERRORS---#
r_est2 <- svyby(~P_UTD431H314_ROUT_S, ~STATE, svydsg, svymean)
r_est2[,-c(1)] <- round(r_est2[,-c(1)]*100,2) #CONVERT INTO PERCENT ESTIMATES
r_est2 <- subset(r_est2, select=c(1,3,5)) #SELECT ESTIMATES FOR UP-TO-DATE CASES
names(r_est2) <- c("STATE", "PERCENT 4:3:1:3:3:1:4 UTD", "STANDARD ERROR UTD")
prn(r_est2, '4:3:1:3:3:1:4 ESTIMATES BY STATE\n')
# CREATE GRAPH_4
graph_4 <- ggplot(data = r_est4, aes(x = INCOME, y = PERCENT_UTD, fill = RACE)) +
geom_bar(position = "dodge", stat = "identity") +
labs(title = "Percentage of Children Up-to-Date with Vaccine Series 4:3:1:3:3:1:4 by Race and Poverty Status,\nNational Immunization Survey - Child, 2023",
caption = "(Graph 4 using 'R')") +
xlab("Poverty Status") +
ylab("4:3:1:3:3:1:4 Up-To-Date (%)") +
theme(legend.position = "bottom")
plot(graph_4)
#---UNWEIGHTED FREQUENCIES---#
unwt_freq <- function(UNWT.VAR){#FUNCTION TO PRINT UNWEIGHTED FREQUENCIES
unwt.tab <- wtd.table(UNWT.VAR, weights= NULL, type='table')
unwtd.freq <- data.frame(cbind(
unwt.tab, round(unwt.tab/sum(unwt.tab)*100,2),
cumsum(unwt.tab), cumsum(round(unwt.tab/sum(unwt.tab)*100,2))))
names(unwtd.freq) <- c("Frequency", "Percent", "Cumulative Frequency", "Cumulative Percent")
unwtd.title <- paste('Table 4A. Q1/2023 - Q4/2023', 'UNWEIGHTED FREQUENCIES', label(UNWT.VAR), sep="\n")
label(unwtd.freq) <- unwtd.title
print(unwtd.freq)
}
unwt_freq(R_FILE$P_UTD431H314_ROUT_S[!is.na(R_FILE$PROVWT)])
unwt_freq(R_FILE$INCPOV1[!is.na(R_FILE$PROVWT)])
unwt_freq(R_FILE$RACE_K[!is.na(R_FILE$PROVWT)])
#---SPECIFY A SAMPLING DESIGN---#
svydsg <- svydesign(id=~SEQNUMHH, strata=~STRATUM, weights=~PROVWT, data=R_FILE[!is.na(R_FILE$PROVWT),])
#---PERCENT 4:3:1:3:3:1:4 UP-TO-DATE UP-TO-DATE AND ESTIMATED STANDARD ERRORS---#
r_est4 <- svyby(~P_UTD431H314_ROUT_S, ~RACE_K+INCPOV1, svydsg, svymean)
r_est4[,-c(1,2)] <- round(r_est4[,-c(1,2)]*100,2) #CONVERT INTO PERCENT ESTIMATES
r_est4 <- subset(r_est4, select=c(1,2,4,6)) #SELECT ESTIMATES FOR UP-TO-DATE CASES
names(r_est4) <- c("RACE", "INCOME", "PERCENT_UTD", "STANDARD_ERROR_UTD")
title <- "Table 4B. Q1/2023 - Q4/2023, Percent 4:3:1:3:3:1:4 UTD and Estimated Standard Errors\n"
prn(r_est4, title)
# CREATE GRAPH_4
graph_4 <- ggplot(data = r_est4, aes(x = INCOME, y = PERCENT_UTD, fill = RACE)) +
geom_bar(position = "dodge", stat = "identity") +
labs(title = "Percentage of Children Up-to-Date with Vaccine Series 4:3:1:3:3:1:4 by Race and Poverty Status,\nNational Immunization Survey - Child, 2023",
caption = "(Graph 4 using 'R')") +
xlab("Poverty Status") +
ylab("4:3:1:3:3:1:4 Up-To-Date (%)") +
theme(legend.position = "bottom")
plot(graph_4)
library(here)
library(tidyverse)
library(readxl)
library(DT)
library(httr)
library(here)
library(tidyverse)
library(readxl)
library(DT)
library(httr)
#Dummy Data
load(here("data/DummyData.Rdata"))
library(here)
library(tidyverse)
library(readxl)
library(DT)
library(httr)
load(here("data/DummyData.Rdata"))
#Import Dummy Data, set date format and column names
data <- read_xlsx(here("data-raw/DummyDataForTesting.xlsx"),
col_names = c("scenario_number", "id", "bday", "cvx", "vax_date", "vax_name", "dose_number", "t_type"),
col_types = c("numeric", "numeric", "date", "text", "date", "text", "numeric", "text"),
skip = 2)
#Import Dummy Data, set date format and column names
data <- read_xlsx(here("data-raw/DummyDataForTesting.xlsx"),
col_names = c("scenario_number", "id", "bday", "cvx", "vax_date", "vax_name", "dose_number", "t_type"),
col_types = c("numeric", "numeric", "date", "text", "date", "text", "numeric", "text"),
skip = 2)
#Import Dummy Data, set date format and column names
data <- read_xlsx(here("data-raw/DummyDataForTesting.xlsx"),
col_names = c("scenario_number", "id", "bday", "cvx", "vax_date", "vax_name", "dose_number", "t_type", "between_vax_bday"),
col_types = c("numeric", "numeric", "date", "text", "date", "text", "numeric", "text", "numeric"),
skip = 2)
warnings()
save(data, file = here("data/DummyData.Rdata"))
library(here)
library(tidyverse)
library(readxl)
library(DT)
library(httr)
load(here("data/DummyData.Rdata"))
View(data)
######## Create latest valid vaccine event column 3 ########
# ONLY looks for most recent event and not checking if valid
recent_vax <- as.Date("8/30/2023")
######## Create latest valid vaccine event column 3 ########
# ONLY looks for most recent event and not checking if valid
recent_vax <- as.Date("08/30/2023")
######## Create latest valid vaccine event column 3 ########
# ONLY looks for most recent event and not checking if valid
recent_vax <- as.Date("08/30/2023", "%m/%d/%y")
######## Create latest valid vaccine event column 3 ########
# ONLY looks for most recent event and not checking if valid
recent_vax <- as.Date("08/30/2023", "%m/%d/%yyyy")
######## Create latest valid vaccine event column 3 ########
# ONLY looks for most recent event and not checking if valid
recent_vax <- as.Date("08/30/23", "%m/%d/%y")
#Import vax schedule
load(here("data/vax_schedule.Rdata"))
?rollforward
date <- ymd("2010-03-03")
rollbackward(date)
date <- ymd("2010-03-03")
rollforward(date)
browser()
### Create patient id column 1 ###
vax_df_patient_id_data <- vax_df[[patient_id_column]]
q
# 2. Run driver_table.R
source(here("R/driver_table.R"))
q
q
# 2. Run driver_table.R
source(here("R/driver_table.R"))
driver_table(data, "id", "bday", "vax_date")
# 2. Run driver_table.R
source(here("R/driver_table.R"))
driver_table(data, "id", "bday", "vax_date")
head(vax_df_bday_data)
head(vax_df_bday_end_data)
# 2. Run driver_table.R
source(here("R/driver_table.R"))
driver_table(data, "id", "bday", "vax_date")
View(sorted_vax_data)
# 2. Run driver_table.R
source(here("R/driver_table.R"))
driver_table(data, "id", "bday", "vax_date")
# 2. Run driver_table.R
source(here("R/driver_table.R"))
driver_table(data, "id", "bday", "vax_date")
View(merged_data)
View(merged_data)
#Import Dummy Data, set date format and column names
data <- read_xlsx(here("data-raw/DummyDataForTesting.xlsx"),
col_names = c("scenario_number", "id", "bday", "cvx", "vax_date", "vax_name", "dose_number", "t_type", "between_vax_bday"),
col_types = c("numeric", "numeric", "date", "text", "date", "text", "numeric", "text", "numeric"),
skip = 2)
save(data, file = here("data/DummyData.Rdata"))
# 2. Run driver_table.R
source(here("R/driver_table.R"))
driver_table(data, "id", "bday", "vax_date")
# 3. Join vax event data to driver table
source(here("R/vaccine_event_processing.R"))
rlang::last_trace()
# 2. Run driver_table.R
source(here("R/driver_table.R"))
driver_table(data, "id", "bday", "vax_date")
# 2. Run driver_table.R
source(here("R/driver_table.R"))
driver_table(data, "id", "bday", "vax_date")
load("~/GitHub/grits-ape-aidan/data/driver_table.Rdata")
datatable(merged_data)
# 3. Join vax event data to driver table
source(here("R/vaccine_event_processing.R"))
vaccine_event_processing(data,"id", "bday", "cvx", "vax_date")
View(vax_schedule)
load("~/GitHub/grits-ape-aidan/data/DummyData.Rdata")
load("~/GitHub/grits-ape-aidan/data/DummyData.Rdata")
library(here)
library(tidyverse)
library(readxl)
library(DT)
library(httr)
load(here("data/DummyData.Rdata"))
